rules:
  # 1️⃣ Hardcoded secrets, passwords, tokens (high entropy + known sensitive keys)
  - id: security.hardcoded-high-entropy-secret
    message: "Hardcoded sensitive value detected. Likely an API key, password, or secret. Use environment variables or a secret manager."
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: hardcoded_secret
      cwe: CWE-798
      fix_type: hardcoded_secret_fix
    patterns:
      - pattern: $KEY = "$VALUE"
      - pattern: $KEY = '$VALUE'
      - pattern: $KEY = `$VALUE`
      - pattern: $KEY = "$VALUE"
      - pattern: $KEY = '$VALUE'
      - pattern: $KEY = `$VALUE`
      - metavariable-regex:
          metavariable: $VALUE
          regex: (?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).{20,}
      - metavariable-regex:
          metavariable: $KEY
          regex: (?i)(api[_-]?key|apikey|secret|token|password|passwd|pwd|auth[_-]?key|credential|cred|db[_-]?pass|db[_-]?password)
      - metavariable-regex:
          metavariable: $KEY
          regex: ^(name|title|version|path|url|id|message|desc|description)$
          regex-negate: true

  # 2️⃣ Sensitive variable names (even if entropy is low)
  - id: security.sensitive-variable-name
    message: "Sensitive variable name detected. This likely contains a secret or password — store it securely instead."
    severity: WARNING
    languages: [javascript, typescript]
    metadata:
      category: hardcoded_secret
      cwe: CWE-798
      fix_type: hardcoded_secret_fix
    pattern-either:
      - pattern: const $VAR = "$VAL"
      - pattern: let $VAR = "$VAL"
      - pattern: var $VAR = "$VAL"
      - pattern: $VAR: "$VAL"
      - pattern: const $VAR = '$VAL'
      - pattern: let $VAR = '$VAL'
      - pattern: var $VAR = '$VAL'
      - pattern: $VAR: '$VAL'
    metavariable-regex:
      metavariable: $VAR
      regex: (?i)(password|passwd|pwd|secret|token|apikey|auth|cred|credential|authkey|db[_-]?pass|db[_-]?password)

  # 3️⃣ Missing Authorization Checks (Express routes and functions)
  - id: security.missing-authorization-check
    message: "Sensitive route/function is missing an authorization check (role validation or ownership check)."
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: authorization
      cwe: CWE-285
    pattern-either:
      - pattern: $APP_OR_ROUTER.$METHOD($PATH, $HANDLER)
      - pattern: $APP_OR_ROUTER.$METHOD($PATH, ..., $HANDLER)
      - pattern: function $FUNC($ARGS) { ... }
      - pattern: const $FUNC = ($ARGS) => { ... }
      - pattern: let $FUNC = async ($ARGS) => { ... }
      - pattern: var $FUNC = function($ARGS) { ... }
    pattern-inside:
      - |
        $HANDLER {
          ...
          $DB.$ACTION($ARGS);
          ...
        }
      - |
        function $FUNC($ARGS) {
          ...
          $DB.$ACTION($ARGS);
          ...
        }
      - metavariable-regex:
        metavariable: $ACTION
        regex: (?i)(delete|remove|drop|update|exec|run|put|post)
      - metavariable-regex:
        metavariable: $METHOD
        regex: (?i)(delete|remove|drop|put|post)
    pattern-not-inside:
      - |
        $HANDLER {
          ...
          if ($REQ.user) { ... }
          ...
        }
      - |
        $HANDLER {
          ...
          if ($REQ.user && $REQ.user.role) { ... }
          ...
        }
      - |
        $HANDLER {
          ...
          if ($REQ.user.role === "admin") { ... }
          ...
        }
      - |
        $HANDLER {
          ...
          if ($REQ.user.isAdmin) { ... }
          ...
        }
      - |
        $HANDLER {
          ...
          if (authorize($REQ)) { ... }
          ...
        }
      - |
        $HANDLER {
          ...
          checkPermission($REQ, $ROLE)
          ...
        }
      - |
        $HANDLER {
          ...
          if ($REQ.user.roles?.includes("admin")) { ... }
          ...
        }

  # 4️⃣ Outdated / vulnerable library imports
  - id: security.outdated-library-import
    message: "Possible outdated or vulnerable library import detected. Verify version in package.json and update if necessary."
    severity: WARNING
    languages: [javascript, typescript, json]
    metadata:
      category: dependency
      cwe: CWE-1104
    pattern-either:
      - pattern: import _ from "lodash"
      - pattern: const _ = require("lodash")
      - pattern: import lodash from "lodash"
      - pattern: const lodash = require("lodash")
      - pattern-inside: |
        {
          ...
          "dependencies": {
            "lodash": "$VER",
            ...
          }
          ...
        }
      - metavariable-regex:
        metavariable: $VER
        regex: ^.*$

  # 5️⃣ Dangerous use of eval / Function()
  - id: security.eval-detected
    message: "Use of eval() or Function() detected. This is dangerous and may lead to code injection vulnerabilities."
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: code_injection
      cwe: CWE-95
    pattern-either:
      - pattern: eval($EXPR)
      - pattern: new Function($ARGS)

  # 6️⃣ Dangerous child_process.exec (command injection)
  - id: security.command-injection
    message: "Use of child_process.exec detected. Consider using spawn with argument arrays and proper validation."
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: command_injection
      cwe: CWE-78
    pattern: require('child_process').exec($CMD)

  # 7️⃣ Insecure HTTP requests (use HTTPS)
  - id: security.insecure-http-request
    message: "Insecure HTTP request detected. Use HTTPS for sensitive data transfers."
    severity: WARNING
    languages: [javascript, typescript]
    metadata:
      category: network_security
      cwe: CWE-319
    pattern-either:
      - pattern: fetch("http://$URL")
      - pattern: axios.get("http://$URL")
      - pattern: axios.post("http://$URL")
      - pattern: new XMLHttpRequest(); $X.open("GET", "http://$URL")

  # 8️⃣ SQL injection risk
  - id: security.sql-injection-risk
    message: "Direct SQL query construction detected. Use parameterized queries or ORM methods to avoid SQL injection."
    severity: ERROR
    languages: [javascript, typescript]
    metadata:
      category: injection
      cwe: CWE-89
    pattern-either:
      - pattern: $DB.query("SELECT $X FROM $Y WHERE $Z = " + $USERINPUT)
      - pattern: $DB.query("SELECT " + $COLS + " FROM " + $TABLE + " WHERE id = " + $USERINPUT)
      - pattern: $DB.execute(`SELECT * FROM ${$TABLE} WHERE id = ${$USERINPUT}`)
